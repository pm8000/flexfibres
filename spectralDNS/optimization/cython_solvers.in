#cython: boundscheck=False
#cython: wraparound=False
#cython: nonecheck=False
import numpy as np
cimport numpy as np

{0}

def add_linear_KMM(rhs, u, g, work, AB, AC, SBB, ABB, BBB, nu, dt, K2, K4):
        diff_u = work[(g, 0, False)]
        diff_g = work[(g, 1, False)]

        # Compute diffusion for g-equation
        diff_g = AB.matvec(g, diff_g)

        # Compute diffusion++ for u-equation
        diff_u = AC.matvec(u, diff_u)

        rhs[0] += diff_u
        rhs[1] += diff_g
        return rhs

def add_diffusion_u_KMMRK3(d, u, AC, SBB, ABB, BBB, nu, dt, K2, K4, a, b):
    d = AC.matvec(u, d)
    return d

def assembleAB_KMM(np.ndarray[complex_t, ndim=4] H_hat0,
                   np.ndarray[complex_t, ndim=4] H_hat,
                   np.ndarray[complex_t, ndim=4] H_hat1):
    cdef int i, j, k, l

    for l in range(H_hat.shape[0]):
        for i in range(H_hat.shape[1]):
            for j in range(H_hat.shape[2]):
                for k in range(H_hat.shape[3]):
                    H_hat0[l, i, j, k] = 1.5*H_hat[l, i, j, k] - 0.5*H_hat1[l, i, j, k]
    return H_hat0

# Make the signature known for Cython
def add_pressure_diffusion_NS(du, u_hat, nu, ksq, kk, p_hat, k_over_k2):
    du = add_pressure_diffusion_NS_(du, u_hat, nu, ksq, kk[0][:,0,0], kk[1][0,:,0], kk[2][0,0,:], p_hat, k_over_k2)
    return du

def add_pressure_diffusion_NS_(np.ndarray[complex_t, ndim=4] du,
                                np.ndarray[complex_t, ndim=4] u_hat,
                                real_t nu,
                                np.ndarray[real_t, ndim=3] ksq,
                                np.ndarray[real_t, ndim=1] kx,
                                np.ndarray[real_t, ndim=1] ky,
                                np.ndarray[real_t, ndim=1] kz,
                                np.ndarray[complex_t, ndim=3] p_hat,
                                np.ndarray[real_t, ndim=4] k_over_k2):
    cdef int i, j, k
    cdef real_t z
    cdef real_t k0, k1, k2
    cdef complex_t du0, du1, du2

    for i in range(ksq.shape[0]):
        k0 = kx[i]
        for j in range(ksq.shape[1]):
            k1 = ky[j]
            for k in range(ksq.shape[2]):
                z = nu*ksq[i,j,k]
                k2 = kz[k]
                # Stupid clang cannot optimize this code. Works fine on linux
                #p_hat[i,j,k] = du[0,i,j,k]*k_over_k2[0,i,j,k]+du[1,i,j,k]*k_over_k2[1,i,j,k]+du[2,i,j,k]*k_over_k2[2,i,j,k]
                #du[0,i,j,k] -= (p_hat[i,j,k]*k0+u_hat[0,i,j,k]*z)
                #du[1,i,j,k] -= (p_hat[i,j,k]*k1+u_hat[1,i,j,k]*z)
                #du[2,i,j,k] -= (p_hat[i,j,k]*k2+u_hat[2,i,j,k]*z)

                p_hat[i,j,k].real = du[0,i,j,k].real*k_over_k2[0,i,j,k]+du[1,i,j,k].real*k_over_k2[1,i,j,k]+du[2,i,j,k].real*k_over_k2[2,i,j,k]
                p_hat[i,j,k].imag = du[0,i,j,k].imag*k_over_k2[0,i,j,k]+du[1,i,j,k].imag*k_over_k2[1,i,j,k]+du[2,i,j,k].imag*k_over_k2[2,i,j,k]
                du[0,i,j,k].real = du[0,i,j,k].real - (p_hat[i,j,k].real*k0+u_hat[0,i,j,k].real*z)
                du[0,i,j,k].imag = du[0,i,j,k].imag - (p_hat[i,j,k].imag*k0+u_hat[0,i,j,k].imag*z)
                du[1,i,j,k].real = du[1,i,j,k].real - (p_hat[i,j,k].real*k1+u_hat[1,i,j,k].real*z)
                du[1,i,j,k].imag = du[1,i,j,k].imag - (p_hat[i,j,k].imag*k1+u_hat[1,i,j,k].imag*z)
                du[2,i,j,k].real = du[2,i,j,k].real - (p_hat[i,j,k].real*k2+u_hat[2,i,j,k].real*z)
                du[2,i,j,k].imag = du[2,i,j,k].imag - (p_hat[i,j,k].imag*k2+u_hat[2,i,j,k].imag*z)

    return du

def add_pressure_diffusion_Bq2D(np.ndarray[complex_t, ndim=3] du,
                                np.ndarray[complex_t, ndim=3] ur_hat,
                                np.ndarray[complex_t, ndim=2] p_hat,
                                np.ndarray[real_t, ndim=3] k_over_k2,
                                list k,
                                np.ndarray[real_t, ndim=2] ksq,
                                real_t nu, real_t Ri, real_t Pr):
    cdef unsigned int i, j
    cdef real_t k0, k1
    cdef real_t z
    cdef np.ndarray[real_t, ndim=2] kx = k[0]
    cdef np.ndarray[real_t, ndim=2] ky = k[1]

    for i in xrange(ksq.shape[0]):
        k0 = kx[i,0]
        for j in xrange(ksq.shape[1]):
            z = nu*ksq[i,j]
            k1 = ky[0,j]
            p_hat[i,j] = du[0,i,j]*k_over_k2[0,i,j]+du[1,i,j]*k_over_k2[1,i,j] - Ri*ur_hat[2,i,j]*k_over_k2[1,i,j]
            du[0,i,j] = du[0,i,j] - (p_hat[i,j]*k0+ur_hat[0,i,j]*z)
            du[1,i,j] = du[1,i,j] - (p_hat[i,j]*k1+ur_hat[1,i,j]*z+Ri*ur_hat[2,i,j])
            du[2,i,j] = du[2,i,j] - ur_hat[2,i,j]*z/Pr
    return du

def add_pressure_diffusion_NS2D(np.ndarray[complex_t, ndim=3] du,
                                np.ndarray[complex_t, ndim=3] u_hat,
                                real_t nu,
                                np.ndarray[real_t, ndim=2] ksq,
                                list k,
                                np.ndarray[complex_t, ndim=2] p_hat,
                                np.ndarray[real_t, ndim=3] k_over_k2):
    cdef unsigned int i, j
    cdef real_t z
    cdef real_t k0, k1
    cdef np.ndarray[real_t, ndim=2] kx = k[0]
    cdef np.ndarray[real_t, ndim=2] ky = k[1]

    for i in xrange(ksq.shape[0]):
        k0 = kx[i,0]
        for j in xrange(ksq.shape[1]):
            z = nu*ksq[i,j]
            k1 = ky[0,j]
            p_hat[i,j] = du[0,i,j]*k_over_k2[0,i,j]+du[1,i,j]*k_over_k2[1,i,j]
            du[0,i,j] = du[0,i,j] - (p_hat[i,j]*k0+u_hat[0,i,j]*z)
            du[1,i,j] = du[1,i,j] - (p_hat[i,j]*k1+u_hat[1,i,j]*z)
    return du

def compute_vw(np.ndarray[complex_t, ndim=4] u_hat,
               np.ndarray[complex_t, ndim=3] f_hat,
               np.ndarray[complex_t, ndim=3] g_hat,
               np.ndarray[real_t, ndim=4] k_over_k2):
    cdef int i, j, k, l

    for i in range(u_hat.shape[1]):
        for j in range(u_hat.shape[2]):
            for k in range(u_hat.shape[3]):
                u_hat[1, i, j, k] = -1j*(k_over_k2[0, i, j, k]*f_hat[i, j, k] - k_over_k2[1, i, j, k]*g_hat[i, j, k])
                u_hat[2, i, j, k] = -1j*(k_over_k2[1, i, j, k]*f_hat[i, j, k] + k_over_k2[0, i, j, k]*g_hat[i, j, k])
                #u_hat[1, i, j, k].real = k_over_k2[0, i, j, k]*f_hat[i, j, k].imag - k_over_k2[1, i, j, k]*g_hat[i, j, k].imag
                #u_hat[1, i, j, k].imag = -k_over_k2[0, i, j, k]*f_hat[i, j, k].real + k_over_k2[1, i, j, k]*g_hat[i, j, k].real
                #u_hat[2, i, j, k].real = k_over_k2[1, i, j, k]*f_hat[i, j, k].imag + k_over_k2[0, i, j, k]*g_hat[i, j, k].imag
                #u_hat[2, i, j, k].imag = -k_over_k2[1, i, j, k]*f_hat[i, j, k].real - k_over_k2[0, i, j, k]*g_hat[i, j, k].real

    return u_hat
