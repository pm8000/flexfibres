#cython: boundscheck=False
#cython: wraparound=False
cimport numpy as np

{0}

ctypedef fused T:
    np.float64_t
    np.float32_t
    np.int64_t
    np.int32_t

def cross1(np.ndarray[real_t, ndim=4] c,
           np.ndarray[real_t, ndim=4] a,
           np.ndarray[real_t, ndim=4] b):
    cdef unsigned int i, j, k
    cdef real_t a0, a1, a2, b0, b1, b2
    for i in xrange(a.shape[1]):
        for j in xrange(a.shape[2]):
            for k in xrange(a.shape[3]):
                a0 = a[0,i,j,k]
                a1 = a[1,i,j,k]
                a2 = a[2,i,j,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k] = a1*b2 - a2*b1
                c[1,i,j,k] = a2*b0 - a0*b2
                c[2,i,j,k] = a0*b1 - a1*b0
    return c

def cross2(c, a, b):
    if isinstance(a, list):
        c = _cross3(c, a, b)
    else:
        c = _cross2(c, a, b)
    return c

def _cross2(np.ndarray[complex_t, ndim=4] c,
           np.ndarray[T, ndim=4] a,
           np.ndarray[complex_t, ndim=4] b):
    cdef unsigned int i, j, k
    cdef T a0, a1, a2
    cdef complex_t b0, b1, b2
    for i in xrange(a.shape[1]):
        for j in xrange(a.shape[2]):
            for k in xrange(a.shape[3]):
                a0 = a[0,i,j,k]
                a1 = a[1,i,j,k]
                a2 = a[2,i,j,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k].real = -(a1*b2.imag - a2*b1.imag)
                c[0,i,j,k].imag = a1*b2.real - a2*b1.real
                c[1,i,j,k].real = -(a2*b0.imag - a0*b2.imag)
                c[1,i,j,k].imag = a2*b0.real - a0*b2.real
                c[2,i,j,k].real = -(a0*b1.imag - a1*b0.imag)
                c[2,i,j,k].imag = a0*b1.real - a1*b0.real
    return c

def _cross3(np.ndarray[complex_t, ndim=4] c,
           list a,
           np.ndarray[complex_t, ndim=4] b):
    cdef unsigned int i, j, k
    cdef real_t a0, a1, a2
    cdef complex_t b0, b1, b2
    cdef np.ndarray[real_t, ndim=3] kx = a[0]
    cdef np.ndarray[real_t, ndim=3] ky = a[1]
    cdef np.ndarray[real_t, ndim=3] kz = a[2]
    for i in xrange(b.shape[1]):
        a0 = kx[i,0,0]
        for j in xrange(b.shape[2]):
            a1 = ky[0,j,0]
            for k in xrange(b.shape[3]):
                a2 = kz[0,0,k]
                b0 = b[0,i,j,k]
                b1 = b[1,i,j,k]
                b2 = b[2,i,j,k]
                c[0,i,j,k].real = -(a1*b2.imag - a2*b1.imag)
                c[0,i,j,k].imag = a1*b2.real - a2*b1.real
                c[1,i,j,k].real = -(a2*b0.imag - a0*b2.imag)
                c[1,i,j,k].imag = a2*b0.real - a0*b2.real
                c[2,i,j,k].real = -(a0*b1.imag - a1*b0.imag)
                c[2,i,j,k].imag = a0*b1.real - a1*b0.real
    return c


def cross1_2D(np.ndarray[real_t, ndim=2] c,
              np.ndarray[real_t, ndim=3] a,
              np.ndarray[real_t, ndim=3] b):
    cdef unsigned int i, j
    cdef real_t a0, a1, b0, b1
    with nogil:
        for i in xrange(a.shape[1]):
            for j in xrange(a.shape[2]):
                a0 = a[0,i,j]
                a1 = a[1,i,j]
                b0 = b[0,i,j]
                b1 = b[1,i,j]
                c[i,j] = a0*b1 - a1*b0
    return c


def cross2_2D(c, a, b):
    if isinstance(a, list):
        c = _cross3_2D(c, a, b)
    else:
        c = _cross2_2D(c, a, b)
    return c

def _cross2_2D(np.ndarray[complex_t, ndim=2] c,
               np.ndarray[T, ndim=3] a,
               np.ndarray[complex_t, ndim=3] b):
    cdef unsigned int i, j
    cdef T a0, a1
    cdef complex_t b0, b1
    for i in xrange(a.shape[1]):
        for j in xrange(a.shape[2]):
            a0 = a[0,i,j]
            a1 = a[1,i,j]
            b0 = b[0,i,j]
            b1 = b[1,i,j]
            c[i,j].real = -(a0*b1.imag - a1*b0.imag)
            c[i,j].imag = a0*b1.real - a1*b0.real
    return c

def _cross3_2D(np.ndarray[complex_t, ndim=2] c,
               list a,
               np.ndarray[complex_t, ndim=3] b):
    cdef unsigned int i, j
    cdef real_t a0, a1
    cdef complex_t b0, b1
    cdef np.ndarray[real_t, ndim=2] kx = a[0]
    cdef np.ndarray[real_t, ndim=2] ky = a[1]

    #c[:] = 1j*(kx*b[1] - ky*b[0])

    for i in xrange(b.shape[1]):
        for j in xrange(b.shape[2]):
            a0 = kx[i,j]
            a1 = ky[i,j]
            b0 = b[0,i,j]
            b1 = b[1,i,j]
            c[i,j].real = -(a0*b1.imag - a1*b0.imag)
            c[i,j].imag = a0*b1.real - a1*b0.real
    return c

def mult_K1j(list K,
             np.ndarray[np.complex128_t, ndim=3] a,
             np.ndarray[np.complex128_t, ndim=4] f):
    cdef unsigned int i, j, k
    cdef real_t ky, kz
    cdef np.ndarray[real_t, ndim=3] Ky = K[1]
    cdef np.ndarray[real_t, ndim=3] Kz = K[2]
    for i in xrange(a.shape[0]):
        for j in xrange(a.shape[1]):
            ky = Ky[0,j,0]
            for k in xrange(a.shape[2]):
                kz = Kz[0,0,k]
                f[0,i,j,k] = 1j*kz*a[i,j,k]
                f[1,i,j,k] = -1j*ky*a[i,j,k]
                #f[0,i,j,k].real = -kz*a[i,j,k].imag
                #f[0,i,j,k].imag = kz*a[i,j,k].real
                #f[1,i,j,k].real = ky*a[i,j,k].imag
                #f[1,i,j,k].imag = -ky*a[i,j,k].real
    return f
